// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cornerstech.DataAccessLayer.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20240904001620_minor-changes")]
    partial class minorchanges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cornerstech.EntityLayer.Entities.Agreement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Agreements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7108),
                            Description = "Özel yazılım çözümleri geliştirilmesi",
                            EndDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Yazılım Geliştirme Anlaşması",
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "İptal Edildi"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7115),
                            Description = "Büyük veri ve analitik hizmetleri sağlanması",
                            EndDate = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Veri Analizi Anlaşması",
                            StartDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Aktif"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7117),
                            Description = "Müşteri hizmetleri yönetimi",
                            EndDate = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Müşteri Hizmetleri Anlaşması",
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Aktif"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7120),
                            Description = "Finansal analiz ve danışmanlık",
                            EndDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Finansal Danışmanlık Anlaşması",
                            StartDate = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Tamamlandı"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7123),
                            Description = "Pazarlama ve strateji danışmanlığı",
                            EndDate = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Pazarlama Stratejisi Anlaşması",
                            StartDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Tamamlandı"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7127),
                            Description = "Lojistik süreçlerin yönetimi",
                            EndDate = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Lojistik Yönetimi Anlaşması",
                            StartDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Aktif"
                        });
                });

            modelBuilder.Entity("Cornerstech.EntityLayer.Entities.AgreementPartner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgreementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AgreementId");

                    b.HasIndex("PartnerId");

                    b.ToTable("AgreementPartners");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgreementId = 1,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7299),
                            IsActive = true,
                            PartnerId = 1
                        },
                        new
                        {
                            Id = 2,
                            AgreementId = 2,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7302),
                            IsActive = true,
                            PartnerId = 2
                        },
                        new
                        {
                            Id = 3,
                            AgreementId = 2,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7303),
                            IsActive = true,
                            PartnerId = 3
                        });
                });

            modelBuilder.Entity("Cornerstech.EntityLayer.Entities.AgreementRisk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgreementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("RiskId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AgreementId");

                    b.HasIndex("RiskId");

                    b.ToTable("AgreementRisks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgreementId = 1,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7591),
                            IsActive = true,
                            RiskId = 1
                        },
                        new
                        {
                            Id = 2,
                            AgreementId = 1,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7594),
                            IsActive = true,
                            RiskId = 2
                        },
                        new
                        {
                            Id = 3,
                            AgreementId = 1,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7596),
                            IsActive = true,
                            RiskId = 3
                        },
                        new
                        {
                            Id = 4,
                            AgreementId = 2,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7598),
                            IsActive = true,
                            RiskId = 4
                        },
                        new
                        {
                            Id = 5,
                            AgreementId = 2,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7599),
                            IsActive = true,
                            RiskId = 5
                        },
                        new
                        {
                            Id = 6,
                            AgreementId = 2,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7602),
                            IsActive = true,
                            RiskId = 6
                        },
                        new
                        {
                            Id = 7,
                            AgreementId = 3,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7604),
                            IsActive = true,
                            RiskId = 7
                        },
                        new
                        {
                            Id = 8,
                            AgreementId = 4,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7605),
                            IsActive = true,
                            RiskId = 8
                        },
                        new
                        {
                            Id = 9,
                            AgreementId = 4,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7607),
                            IsActive = true,
                            RiskId = 9
                        },
                        new
                        {
                            Id = 10,
                            AgreementId = 5,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7610),
                            IsActive = true,
                            RiskId = 1
                        },
                        new
                        {
                            Id = 11,
                            AgreementId = 5,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7612),
                            IsActive = true,
                            RiskId = 2
                        },
                        new
                        {
                            Id = 12,
                            AgreementId = 5,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7613),
                            IsActive = true,
                            RiskId = 6
                        },
                        new
                        {
                            Id = 13,
                            AgreementId = 6,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7615),
                            IsActive = true,
                            RiskId = 20
                        });
                });

            modelBuilder.Entity("Cornerstech.EntityLayer.Entities.AgreementSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgreementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AgreementId");

                    b.HasIndex("SubjectId");

                    b.ToTable("AgreementSubjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgreementId = 1,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7647),
                            IsActive = true,
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            AgreementId = 1,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7650),
                            IsActive = true,
                            SubjectId = 2
                        },
                        new
                        {
                            Id = 3,
                            AgreementId = 2,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7652),
                            IsActive = true,
                            SubjectId = 3
                        },
                        new
                        {
                            Id = 4,
                            AgreementId = 3,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7654),
                            IsActive = true,
                            SubjectId = 4
                        },
                        new
                        {
                            Id = 5,
                            AgreementId = 3,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7655),
                            IsActive = true,
                            SubjectId = 5
                        },
                        new
                        {
                            Id = 6,
                            AgreementId = 3,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7658),
                            IsActive = true,
                            SubjectId = 6
                        },
                        new
                        {
                            Id = 7,
                            AgreementId = 4,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7687),
                            IsActive = true,
                            SubjectId = 7
                        },
                        new
                        {
                            Id = 8,
                            AgreementId = 4,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7689),
                            IsActive = true,
                            SubjectId = 8
                        },
                        new
                        {
                            Id = 9,
                            AgreementId = 5,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7690),
                            IsActive = true,
                            SubjectId = 9
                        },
                        new
                        {
                            Id = 10,
                            AgreementId = 6,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7693),
                            IsActive = true,
                            SubjectId = 10
                        },
                        new
                        {
                            Id = 11,
                            AgreementId = 6,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7694),
                            IsActive = true,
                            SubjectId = 11
                        },
                        new
                        {
                            Id = 12,
                            AgreementId = 6,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7696),
                            IsActive = true,
                            SubjectId = 12
                        },
                        new
                        {
                            Id = 13,
                            AgreementId = 6,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7698),
                            IsActive = true,
                            SubjectId = 13
                        });
                });

            modelBuilder.Entity("Cornerstech.EntityLayer.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Text = "Yeni bir anlaşma oluşturuldu: Tedarikçi Anlaşması"
                        },
                        new
                        {
                            Id = 2,
                            Text = "Yeni bir anlaşma oluşturuldu: Dağıtım Anlaşması"
                        });
                });

            modelBuilder.Entity("Cornerstech.EntityLayer.Entities.NotificationApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("NotificationId");

                    b.ToTable("NotificationApplicationUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = 1,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7352),
                            IsActive = true,
                            IsRead = false,
                            NotificationId = 1
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = 1,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7355),
                            IsActive = true,
                            IsRead = false,
                            NotificationId = 2
                        },
                        new
                        {
                            Id = 3,
                            ApplicationUserId = 2,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7356),
                            IsActive = true,
                            IsRead = false,
                            NotificationId = 1
                        },
                        new
                        {
                            Id = 4,
                            ApplicationUserId = 3,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7357),
                            IsActive = true,
                            IsRead = false,
                            NotificationId = 1
                        },
                        new
                        {
                            Id = 5,
                            ApplicationUserId = 2,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7358),
                            IsActive = true,
                            IsRead = false,
                            NotificationId = 2
                        },
                        new
                        {
                            Id = 6,
                            ApplicationUserId = 3,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7361),
                            IsActive = true,
                            IsRead = false,
                            NotificationId = 2
                        });
                });

            modelBuilder.Entity("Cornerstech.EntityLayer.Entities.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Industry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Partners");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "İstanbul",
                            ContactEmail = "info@abctedarikci.com",
                            Country = "Türkiye",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7264),
                            Industry = "Lojistik",
                            IsActive = true,
                            Name = "ABC Tedarikçi",
                            PhoneNumber = "05321234567",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            City = "Bursa",
                            ContactEmail = "info@xyzdagitim.com",
                            Country = "Türkiye",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7270),
                            Industry = "Dağıtım",
                            IsActive = true,
                            Name = "XYZ Dağıtım",
                            PhoneNumber = "05329876543",
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            City = "İstanbul",
                            ContactEmail = "info@cornerstech.com",
                            Country = "Türkiye",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7272),
                            Industry = "Yazılım",
                            IsActive = true,
                            Name = "Cornerstech",
                            PhoneNumber = "05444444444",
                            UserId = 4
                        });
                });

            modelBuilder.Entity("Cornerstech.EntityLayer.Entities.Risk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Frequence")
                        .HasColumnType("float");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double?>("Level")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Possibility")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Risks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "İnsan Kaynakları",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7390),
                            Frequence = 10.0,
                            IsActive = true,
                            Level = 100.0,
                            Name = "Personel Kaybı Riski",
                            Possibility = 10.0
                        },
                        new
                        {
                            Id = 2,
                            Category = "Bilgi Güvenliği",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7395),
                            Frequence = 6.0,
                            IsActive = true,
                            Level = 40.0,
                            Name = "Veri Kaybı Riski",
                            Possibility = 6.0
                        },
                        new
                        {
                            Id = 3,
                            Category = "Hukuki",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7397),
                            Frequence = 3.0,
                            IsActive = true,
                            Level = 15.0,
                            Name = "Yasal Uyuşmazlık Riski",
                            Possibility = 1.5
                        },
                        new
                        {
                            Id = 4,
                            Category = "Üretim",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7399),
                            Frequence = 1.0,
                            IsActive = true,
                            Level = 7.0,
                            Name = "Ürün Kalitesi Riski",
                            Possibility = 0.20000000000000001
                        },
                        new
                        {
                            Id = 5,
                            Category = "Ar-Ge",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7402),
                            Frequence = 1.0,
                            IsActive = true,
                            Level = 3.0,
                            Name = "Ar-Ge Projesi Başarısızlığı",
                            Possibility = 0.20000000000000001
                        },
                        new
                        {
                            Id = 6,
                            Category = "Finans",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7405),
                            Frequence = 10.0,
                            IsActive = true,
                            Level = 100.0,
                            Name = "Kredi Riski",
                            Possibility = 10.0
                        },
                        new
                        {
                            Id = 7,
                            Category = "Çevresel",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7407),
                            Frequence = 10.0,
                            IsActive = true,
                            Level = 100.0,
                            Name = "Doğal Afet Riski",
                            Possibility = 10.0
                        },
                        new
                        {
                            Id = 8,
                            Category = "Tedarik Zinciri",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7444),
                            Frequence = 3.0,
                            IsActive = true,
                            Level = 15.0,
                            Name = "Tedarikçi İflası Riski",
                            Possibility = 1.5
                        },
                        new
                        {
                            Id = 9,
                            Category = "İş Sağlığı ve Güvenliği",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7446),
                            Frequence = 2.0,
                            IsActive = true,
                            Level = 7.0,
                            Name = "İş Kazası Riski",
                            Possibility = 1.5
                        },
                        new
                        {
                            Id = 10,
                            Category = "Finans",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7449),
                            Frequence = 1.0,
                            IsActive = true,
                            Level = 3.0,
                            Name = "Yatırım Getirisi Riski",
                            Possibility = 0.20000000000000001
                        },
                        new
                        {
                            Id = 11,
                            Category = "Teknoloji",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7452),
                            Frequence = 10.0,
                            IsActive = true,
                            Level = 100.0,
                            Name = "Teknolojik Değişiklik Riski",
                            Possibility = 10.0
                        },
                        new
                        {
                            Id = 12,
                            Category = "Pazarlama",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7454),
                            Frequence = 6.0,
                            IsActive = true,
                            Level = 40.0,
                            Name = "Müşteri Memnuniyeti Riski",
                            Possibility = 6.0
                        },
                        new
                        {
                            Id = 13,
                            Category = "Proje Yönetimi",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7456),
                            Frequence = 3.0,
                            IsActive = true,
                            Level = 15.0,
                            Name = "Projelerde Gecikme Riski",
                            Possibility = 1.5
                        },
                        new
                        {
                            Id = 14,
                            Category = "Pazarlama",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7459),
                            Frequence = 1.0,
                            IsActive = true,
                            Level = 7.0,
                            Name = "Talep Düşüşü Riski",
                            Possibility = 0.20000000000000001
                        },
                        new
                        {
                            Id = 15,
                            Category = "Kurumsal Yönetim",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7461),
                            Frequence = 1.0,
                            IsActive = true,
                            Level = 3.0,
                            Name = "Kurumsal Yolsuzluk Riski",
                            Possibility = 0.20000000000000001
                        },
                        new
                        {
                            Id = 16,
                            Category = "Pazarlama",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7464),
                            Frequence = 10.0,
                            IsActive = true,
                            Level = 100.0,
                            Name = "Pazarlama Başarısızlığı Riski",
                            Possibility = 10.0
                        },
                        new
                        {
                            Id = 17,
                            Category = "Hukuki",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7466),
                            Frequence = 6.0,
                            IsActive = true,
                            Level = 40.0,
                            Name = "Fikri Mülkiyet İhlali Riski",
                            Possibility = 6.0
                        },
                        new
                        {
                            Id = 18,
                            Category = "İnsan Kaynakları",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7469),
                            Frequence = 3.0,
                            IsActive = true,
                            Level = 15.0,
                            Name = "Çalışan Motivasyon Düşüşü",
                            Possibility = 1.5
                        },
                        new
                        {
                            Id = 19,
                            Category = "Çevresel",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7471),
                            Frequence = 1.0,
                            IsActive = true,
                            Level = 7.0,
                            Name = "İklim Değişikliği Riski",
                            Possibility = 0.20000000000000001
                        },
                        new
                        {
                            Id = 20,
                            Category = "Üretim",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7474),
                            Frequence = 10.0,
                            IsActive = true,
                            Level = 100.0,
                            Name = "Ürün Geri Çağırma Riski",
                            Possibility = 10.0
                        });
                });

            modelBuilder.Entity("Cornerstech.EntityLayer.Entities.RiskManagement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RiskCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RiskDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RiskValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("RiskManagements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7735),
                            IsActive = true,
                            RiskCategory = "Seviye",
                            RiskDescription = "Birden fazla ölümlü kaza",
                            RiskValue = 100.00m
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7738),
                            IsActive = true,
                            RiskCategory = "Seviye",
                            RiskDescription = "Öldürücü kaza",
                            RiskValue = 40.00m
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7740),
                            IsActive = true,
                            RiskCategory = "Seviye",
                            RiskDescription = "Kalıcı hasar/yaralanma, iş kaybı",
                            RiskValue = 15.00m
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7742),
                            IsActive = true,
                            RiskCategory = "Seviye",
                            RiskDescription = "Önemli hasar/yaralanma",
                            RiskValue = 7.00m
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7744),
                            IsActive = true,
                            RiskCategory = "Seviye",
                            RiskDescription = "Küçük hasar/yaralanma",
                            RiskValue = 3.00m
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7747),
                            IsActive = true,
                            RiskCategory = "Seviye",
                            RiskDescription = "Ucuz atlatma",
                            RiskValue = 0.50m
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7749),
                            IsActive = true,
                            RiskCategory = "Frekans",
                            RiskDescription = "Hemen hemen sürekli",
                            RiskValue = 10.00m
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7751),
                            IsActive = true,
                            RiskCategory = "Frekans",
                            RiskDescription = "Sık",
                            RiskValue = 6.00m
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7753),
                            IsActive = true,
                            RiskCategory = "Frekans",
                            RiskDescription = "Ara sıra",
                            RiskValue = 3.00m
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7756),
                            IsActive = true,
                            RiskCategory = "Frekans",
                            RiskDescription = "Sık değil",
                            RiskValue = 2.00m
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7758),
                            IsActive = true,
                            RiskCategory = "Frekans",
                            RiskDescription = "Seyrek",
                            RiskValue = 1.00m
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7760),
                            IsActive = true,
                            RiskCategory = "Frekans",
                            RiskDescription = "Çok seyrek",
                            RiskValue = 0.50m
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7761),
                            IsActive = true,
                            RiskCategory = "Frekans",
                            RiskDescription = "Beklenir, kesin",
                            RiskValue = 10.00m
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7763),
                            IsActive = true,
                            RiskCategory = "Olasılık",
                            RiskDescription = "Yüksek / oldukça mümkün",
                            RiskValue = 6.00m
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7765),
                            IsActive = true,
                            RiskCategory = "Olasılık",
                            RiskDescription = "Olası",
                            RiskValue = 3.00m
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7767),
                            IsActive = true,
                            RiskCategory = "Olasılık",
                            RiskDescription = "Mümkün fakat düşük",
                            RiskValue = 2.00m
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7769),
                            IsActive = true,
                            RiskCategory = "Olasılık",
                            RiskDescription = "Beklenmez fakat mümkün",
                            RiskValue = 0.50m
                        },
                        new
                        {
                            Id = 18,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7771),
                            IsActive = true,
                            RiskCategory = "Olasılık",
                            RiskDescription = "Beklenmez",
                            RiskValue = 0.20m
                        });
                });

            modelBuilder.Entity("Cornerstech.EntityLayer.Entities.SubjectOfWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SubjectOfWorks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "BT",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7514),
                            Description = "Özel yazılım geliştirme hizmetleri.",
                            IsActive = true,
                            Name = "Yazılım Geliştirme"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Lojistik",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7518),
                            Description = "Kapsamlı lojistik çözümleri.",
                            IsActive = true,
                            Name = "Lojistik Destek"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Finans",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7519),
                            Description = "Finansal yönetim ve yatırım danışmanlık hizmetleri.",
                            IsActive = true,
                            Name = "Finansal Danışmanlık"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Pazarlama",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7521),
                            Description = "Pazarlama kampanyaları ve stratejik planlama.",
                            IsActive = true,
                            Name = "Pazarlama Stratejisi"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Hukuk",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7523),
                            Description = "Şirketler için hukuki danışmanlık ve dava desteği.",
                            IsActive = true,
                            Name = "Hukuki Danışmanlık"
                        },
                        new
                        {
                            Id = 6,
                            Category = "İnsan Kaynakları",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7525),
                            Description = "Personel yönetimi ve organizasyonel gelişim.",
                            IsActive = true,
                            Name = "İnsan Kaynakları Yönetimi"
                        },
                        new
                        {
                            Id = 7,
                            Category = "Üretim",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7527),
                            Description = "Üretim süreçlerinin optimizasyonu ve verimliliği.",
                            IsActive = true,
                            Name = "Üretim Yönetimi"
                        },
                        new
                        {
                            Id = 8,
                            Category = "Proje Yönetimi",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7529),
                            Description = "Büyük ölçekli projelerin yönetimi ve planlanması.",
                            IsActive = true,
                            Name = "Proje Yönetimi"
                        },
                        new
                        {
                            Id = 9,
                            Category = "Ar-Ge",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7531),
                            Description = "Yeni ürün geliştirme ve inovasyon süreçleri.",
                            IsActive = true,
                            Name = "Ar-Ge Çalışmaları"
                        },
                        new
                        {
                            Id = 10,
                            Category = "Kalite",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7534),
                            Description = "Ürün ve hizmetlerde kalite güvence süreçleri.",
                            IsActive = true,
                            Name = "Kalite Kontrol"
                        },
                        new
                        {
                            Id = 11,
                            Category = "BT",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7536),
                            Description = "Şirketlerin dijital altyapıya geçişi ve modernizasyonu.",
                            IsActive = true,
                            Name = "Dijital Dönüşüm"
                        },
                        new
                        {
                            Id = 12,
                            Category = "Finans",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7538),
                            Description = "Şirket risklerinin tespiti ve yönetimi.",
                            IsActive = true,
                            Name = "Risk Yönetimi"
                        },
                        new
                        {
                            Id = 13,
                            Category = "Lojistik",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7540),
                            Description = "Satın alma süreçleri ve tedarik zinciri yönetimi.",
                            IsActive = true,
                            Name = "Satın Alma ve Tedarik Zinciri"
                        },
                        new
                        {
                            Id = 14,
                            Category = "Pazarlama",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7541),
                            Description = "Müşteri memnuniyeti ve sadakat programları.",
                            IsActive = true,
                            Name = "Müşteri İlişkileri Yönetimi"
                        },
                        new
                        {
                            Id = 15,
                            Category = "Finans",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7543),
                            Description = "Vergi planlaması ve uyum hizmetleri.",
                            IsActive = true,
                            Name = "Vergi Danışmanlığı"
                        },
                        new
                        {
                            Id = 16,
                            Category = "İnsan Kaynakları",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7545),
                            Description = "İç iletişim stratejileri ve çalışan motivasyonu.",
                            IsActive = true,
                            Name = "Şirket İç İletişim"
                        },
                        new
                        {
                            Id = 17,
                            Category = "BT",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7547),
                            Description = "Siber güvenlik ve veri koruma hizmetleri.",
                            IsActive = true,
                            Name = "Bilişim Güvenliği"
                        },
                        new
                        {
                            Id = 18,
                            Category = "Satış",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7550),
                            Description = "Satış ekiplerinin yönetimi ve performans takibi.",
                            IsActive = true,
                            Name = "Satış Yönetimi"
                        },
                        new
                        {
                            Id = 19,
                            Category = "Enerji",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7551),
                            Description = "Enerji tüketimi ve verimliliği yönetimi.",
                            IsActive = true,
                            Name = "Enerji Yönetimi"
                        },
                        new
                        {
                            Id = 20,
                            Category = "Ar-Ge",
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7553),
                            Description = "Şirketlerde inovasyon kültürünün oluşturulması.",
                            IsActive = true,
                            Name = "İnovasyon Yönetimi"
                        });
                });

            modelBuilder.Entity("Cornerstech.EntityLayer.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7224),
                            Email = "beyza@example.com",
                            IsActive = true,
                            Password = "1234",
                            Role = "Admin",
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7228),
                            Email = "beyza@example.com",
                            IsActive = true,
                            Password = "1234",
                            Role = "Partner",
                            UserName = "beyza"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7230),
                            Email = "mehmet@example.com",
                            IsActive = true,
                            Password = "1234",
                            Role = "Partner",
                            UserName = "mehmet"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 9, 4, 3, 16, 20, 145, DateTimeKind.Local).AddTicks(7232),
                            Email = "asli@example.com",
                            IsActive = true,
                            Password = "1234",
                            Role = "Partner",
                            UserName = "asli"
                        });
                });

            modelBuilder.Entity("Cornerstech.EntityLayer.Entities.AgreementPartner", b =>
                {
                    b.HasOne("Cornerstech.EntityLayer.Entities.Agreement", "Agreement")
                        .WithMany("AgreementPartners")
                        .HasForeignKey("AgreementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cornerstech.EntityLayer.Entities.Partner", "Partner")
                        .WithMany("AgreementPartners")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agreement");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Cornerstech.EntityLayer.Entities.AgreementRisk", b =>
                {
                    b.HasOne("Cornerstech.EntityLayer.Entities.Agreement", "Agreement")
                        .WithMany("AgreementRisks")
                        .HasForeignKey("AgreementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cornerstech.EntityLayer.Entities.Risk", "Risk")
                        .WithMany("AgreementRisks")
                        .HasForeignKey("RiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agreement");

                    b.Navigation("Risk");
                });

            modelBuilder.Entity("Cornerstech.EntityLayer.Entities.AgreementSubject", b =>
                {
                    b.HasOne("Cornerstech.EntityLayer.Entities.Agreement", "Agreement")
                        .WithMany("AgreementSubjects")
                        .HasForeignKey("AgreementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cornerstech.EntityLayer.Entities.SubjectOfWork", "Subject")
                        .WithMany("AgreementSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agreement");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Cornerstech.EntityLayer.Entities.NotificationApplicationUser", b =>
                {
                    b.HasOne("Cornerstech.EntityLayer.Entities.User", "ApplicationUser")
                        .WithMany("NotificationApplicationUsers")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cornerstech.EntityLayer.Entities.Notification", "Notification")
                        .WithMany("NotificationApplicationUsers")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Cornerstech.EntityLayer.Entities.Partner", b =>
                {
                    b.HasOne("Cornerstech.EntityLayer.Entities.User", "User")
                        .WithOne("Partner")
                        .HasForeignKey("Cornerstech.EntityLayer.Entities.Partner", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cornerstech.EntityLayer.Entities.Agreement", b =>
                {
                    b.Navigation("AgreementPartners");

                    b.Navigation("AgreementRisks");

                    b.Navigation("AgreementSubjects");
                });

            modelBuilder.Entity("Cornerstech.EntityLayer.Entities.Notification", b =>
                {
                    b.Navigation("NotificationApplicationUsers");
                });

            modelBuilder.Entity("Cornerstech.EntityLayer.Entities.Partner", b =>
                {
                    b.Navigation("AgreementPartners");
                });

            modelBuilder.Entity("Cornerstech.EntityLayer.Entities.Risk", b =>
                {
                    b.Navigation("AgreementRisks");
                });

            modelBuilder.Entity("Cornerstech.EntityLayer.Entities.SubjectOfWork", b =>
                {
                    b.Navigation("AgreementSubjects");
                });

            modelBuilder.Entity("Cornerstech.EntityLayer.Entities.User", b =>
                {
                    b.Navigation("NotificationApplicationUsers");

                    b.Navigation("Partner")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
